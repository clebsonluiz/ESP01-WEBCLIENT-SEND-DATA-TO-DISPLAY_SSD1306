#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>

#include "ArduinoJson.h"

#include "WebSecret.h"

#define DISPLAY_SDA 2
#define DISPLAY_SCL 0

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET     -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 'ufrpe-uast-logos-800', 128x64px
const unsigned char epd_bitmap_ufrpe_uast_logos_800 [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x0f, 0xfc, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x03, 0x80, 0x0f, 0xfc, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x07, 0xb0, 0x0f, 0xfc, 0x01, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1f, 0xf0, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1f, 0xf8, 0x08, 0x04, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1f, 0xf0, 0x00, 0x80, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3c, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xd0, 0xa6, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xc7, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x02, 0x40, 0x00, 0x00,
  0x00, 0x00, 0xf8, 0xff, 0xff, 0x87, 0xc0, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x3e, 0x1f, 0xff, 0xff, 0xfe, 0x1f, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x01, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x80, 0x00,
  0x00, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
  0x00, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xfe, 0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x5f, 0xff, 0xff, 0xff, 0xf1, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00,
  0x00, 0x5f, 0xff, 0xef, 0xff, 0xe3, 0xff, 0x80, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x5f, 0x7e, 0xff, 0xff, 0xe3, 0xfd, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x7f, 0xff, 0xff, 0xff, 0xf3, 0xfd, 0x00, 0x08, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x2f, 0xff, 0xff, 0xf8, 0x01, 0xfd, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
  0x00, 0x2f, 0xff, 0xff, 0xef, 0xa1, 0xfd, 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x2f, 0xfe, 0xff, 0xff, 0xe1, 0xff, 0x00, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x80,
  0x00, 0x2f, 0xfe, 0xfd, 0xdf, 0xc1, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x2f, 0xff, 0xff, 0xff, 0xc3, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x00, 0x3f, 0xff, 0xff, 0xff, 0xc3, 0xfa, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x17, 0xff, 0xff, 0xff, 0x93, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
  0x00, 0x17, 0xff, 0xfe, 0xff, 0x99, 0xfa, 0x00, 0x20, 0x08, 0x30, 0x60, 0x3c, 0xff, 0x00, 0x40,
  0x00, 0x17, 0xff, 0xff, 0xff, 0x99, 0xfa, 0x00, 0x00, 0x18, 0x30, 0xf0, 0xc4, 0xff, 0x00, 0x00,
  0x00, 0x17, 0xff, 0xde, 0xff, 0x9c, 0xfe, 0x00, 0x20, 0x18, 0x31, 0xb0, 0xe0, 0x18, 0x00, 0x40,
  0x00, 0x17, 0xff, 0xf0, 0x00, 0x03, 0xf4, 0x00, 0x00, 0x18, 0x31, 0x98, 0x3c, 0x18, 0x00, 0x00,
  0x00, 0x17, 0xf0, 0x00, 0x0f, 0xfc, 0x04, 0x00, 0x00, 0x1c, 0x73, 0xfc, 0x06, 0x18, 0x01, 0x00,
  0x00, 0x1c, 0x00, 0x03, 0xff, 0x00, 0x74, 0x00, 0x10, 0x0f, 0xe7, 0x0c, 0xfc, 0x18, 0x00, 0x00,
  0x00, 0x08, 0x00, 0x3f, 0xc0, 0x07, 0xf4, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x1f, 0xff, 0xff, 0xff, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x00, 0x1f, 0xf4, 0xb6, 0xe6, 0x4f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
  0x01, 0xf6, 0x6d, 0x84, 0x2e, 0x5b, 0x93, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xf6, 0x71, 0xbf, 0xae, 0x4a, 0x37, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x77, 0xff, 0xfb, 0xff, 0xff, 0xf3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7f, 0x60, 0x07, 0xfc, 0x01, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0xc0, 0x34, 0x1f, 0xf0, 0x12, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0xf0, 0x0d, 0x7f, 0xe0, 0x4c, 0x03, 0xfc, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0xf8, 0x03, 0x3f, 0x81, 0x60, 0x0f, 0xfc, 0x00, 0x00, 0xa8, 0x00, 0x00, 0xc0, 0x00, 0x00,
  0x0f, 0xfc, 0x00, 0x67, 0x0f, 0x80, 0x1f, 0xf8, 0x00, 0x00, 0x1b, 0x68, 0x2c, 0x00, 0x00, 0x00,
  0x07, 0xc0, 0x08, 0x1c, 0x7c, 0x40, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xc1, 0x87, 0xf9, 0xfc, 0x0f, 0xc1, 0xfe, 0x00, 0x03, 0x87, 0x07, 0x80, 0xf8, 0xff, 0x00,
  0x00, 0xc1, 0xcf, 0xf9, 0xff, 0x1f, 0xf1, 0xff, 0x00, 0x03, 0x87, 0x0f, 0x83, 0xfc, 0xff, 0x80,
  0x00, 0xc1, 0xc6, 0x01, 0xc7, 0x1c, 0x39, 0xc0, 0x00, 0x03, 0x87, 0x0f, 0xc3, 0x80, 0x1c, 0x00,
  0x00, 0xc1, 0xc7, 0xf1, 0xff, 0x1c, 0x79, 0xfe, 0x07, 0x03, 0x87, 0x1c, 0xc3, 0xf8, 0x1c, 0x00,
  0x00, 0xe1, 0xc7, 0xf1, 0xfc, 0x1f, 0xf1, 0xc0, 0x03, 0x03, 0x87, 0x1c, 0xe0, 0x1c, 0x1c, 0x00,
  0x00, 0xff, 0x86, 0x01, 0xcf, 0x1c, 0x01, 0xde, 0x00, 0x03, 0xfe, 0x3f, 0xf3, 0x1c, 0x1c, 0x00,
  0x00, 0x7f, 0x0e, 0x01, 0xc3, 0xdc, 0x01, 0xff, 0x00, 0x00, 0xfc, 0x70, 0x73, 0xf8, 0x1c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const char *ssid = WIFI_SSID;
const char *pass = WIFI_PASS;
const char *server_host = "http://economia.awesomeapi.com.br/last/USD-BRL,BTC-BRL";

void setup() {
  Serial.begin(9600);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, pass);
  Serial.println();


  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Connected to: ");
  Serial.print(ssid);
  Serial.print(" IP address: ");
  Serial.println(WiFi.localIP());

  Wire.begin(DISPLAY_SDA, DISPLAY_SCL); //INICIALIZA A BIBLIOTECA WIRE
  
  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
  display.setTextColor(WHITE);
  display.clearDisplay();
}

void loop() {
  display.clearDisplay();

  display.setTextSize(1);
  display.setCursor(0, 0);

  display.print("Testando Display OLED");
  display.display();
  delay(1500);
  display.setCursor(0, 18);
  display.setTextSize(1);
  display.print("HTTP REQUEST!");
  display.display();


  WiFiClient client;
  HTTPClient http;

  http.begin(client, server_host); //Only HTTP, Not HTTPS

  Serial.println("[HTTP RESQUEST] ...");

  int httpCode = http.GET();

  Serial.println("[RESPONSE CODE]: " + httpCode);

  // If not negative then as made request
  if (httpCode > 0) {


    StaticJsonDocument<1024> json;

    const String payload = http.getString();

    deserializeJson(json, payload);

    String dolar_real = json["USDBRL"]["bid"];
    String bitc_real = json["BTCBRL"]["bid"];
    String date_time = json["USDBRL"]["create_date"];


    String texto1 = "U$-R$: " + dolar_real;
    String texto2 = "BTC-R$: " + bitc_real;

    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.print(date_time);
    delay(1500);
    display.setCursor(0, 20);
    display.setTextSize(1);
    display.print(texto1);
    delay(1500);
    display.setCursor(0, 40);
    display.setTextSize(1);
    display.print(texto2);
    display.display();

//          Serial.print("Dolar pra Real: ");
//          Serial.println(dolar_real);
//          Serial.print("Bitcoin pra Real: ");
//          Serial.println(bitc_real);
//          Serial.print("Data: ");
//          Serial.println(date_time);
//          Serial.println();

  } else {

    display.setCursor(0, 36);
    display.setTextSize(1);
    display.print("Falhou!");
    display.display();

//    Serial.print("[HTTP REQUEST FAILED], [ERROR: ");
//    Serial.print(http.errorToString(httpCode).c_str());
//    Serial.print("]");
//    Serial.println();
  }

  delay(2500);
  display.clearDisplay();
  drawLogo();

  http.end(); // Aways need to end httpclient
  delay(10000); // New Request in 10 seconds


}

void drawLogo() {
  display.clearDisplay();
  display.drawBitmap(0, 0, epd_bitmap_ufrpe_uast_logos_800, 128, 64, 1);
  display.display();
  delay(3500);
  display.clearDisplay();
}
